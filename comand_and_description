Alexadr-for-job-2021

https://www.conventionalcommits.org/ru/v1.0.0-beta.4/  commits for github

Чтобы задать имя пользователя и email необходимо выполнить следующие команды:
git config --global user.name "Vasya Pupkin"
git config --global user.email vasya@localhost

РАБОТА В ЛОКАЛЬНОМ РЕПОЗИТОРИИ

ЗАДАЧА
Решим следующую задачу: у нас есть проект веб-сайта, состоящий из
нескольких файлов и каталогов. Задача состоит в том, чтобы перевести
работу с этим сайтом в Git.
ОБЩАЯ СХЕМА РАБОТЫ
1. Создание локального репозитория для проекта;
2. Добавление файлов (изменённых) в список отслеживания (stage area или index);
3. Фиксация изменений в файлах (commit).
Операции 2 и 3 выполняются в течение всего развития проекта.

Репозиторий создаётся в конкретном каталоге с помощью команды:
$ git init  #В результате появится подкаталог .git в котором и будут храниться служебные настройки git'а и сам репозиторий.

ДОБАВЛЕНИЕ ФАЙЛОВ
Git будет следить только за теми файлами, которые вы добавили в «список отслеживаемых».
Cделать это можно с помощью команды:
$ git add index.html # где index.html – это имя добавляемого файла.

Есть ряд специальных символов, которые позволяют упростить процесс работы с файлами:
Специальный символ * означает любую последовательность символов.
— git add * добавит в список отслеживаемых файлов все файлы в текущем каталоге и подкаталогах;
— git add *.js добавит в список отслеживаемых файлов все файлы с расширением .js в текущем каталоге и подкаталогах.

Команда git status позволяет отследить текущий статус нашего репозитория:
$ git status
Для фиксации изменений используется команда git commit
$ git commit
После коммита мы получаем «чистое» состояние, готовое к новому добавлению изменений и фиксации ( git status )
$ git status
Флаг -a ( --all ) говорит о том, что мы добавляем в stage все удалённые/изменённые файлы (но не новые, новые нужно добавлять отдельно).
Флаг -m "Сообщение коммита" ( --message="Сообщение коммита" ) позволяет не открывать редактор, а указывать сообщение прямо в командной строке.

ИСТОРИЯ
Посмотреть историю коммитов можно с помощью команды git log .
$ git log
Перед коммитом файла Git вычисляет контрольую сумму, которая является идентификатором коммита. 
Ex: commit 3e36e82215a88a219a0a22fb7ce177bf05ad4208

Можно разными способами выйти из просмотра логов git log :
HotKey Ctrl + C.
HotKey Ctrl + Break.
Ввести Q и нажать Enter.

В результате слияния создаётся новый коммит, в рамках которого и объединяются изменения из ветки feature/payment в ветку master .
master$ git log --graph --oneline


Посмотреть полную информацию о коммите мы можем с помощью команды git show <id-коммитта> . 
ID не обязательно писать целиком, достаточно первых нескольких символов
$ git show 3e36e

Если вы случайно добавили в stage area файл, который добавлять не нужно, то удалить его можно командой:
$ git rm --cached stuff.txt #где stuff.txt – имя файла.
Если вы случайно зафиксировали коммит с ошибочным комментарием, то исправить комментарий последнего коммита можно с помощью команды:
$ git commit --amend -m "Roboto Font" # где "Roboto Font" – новое сообщение коммита.
Если вы залили коммит с ошибкой, то можно создать «зеркальный» коммит, который отменит действие предыдущего:
$ git revert <commit-id> # где <commit-id> – идентификатор коммита.
# Идентификатор коммита можно посмотреть с помощью команды git log .
Вся справка по командам предоставляется самим Git:
git – краткая справка по git;
git help <command> – справка по конкретной команде git.

КЛОНИРОВАНИЕ РЕПОЗИТОРИЯ
Операция git clone позволяет нам склонировать удалённый
репозиторий, т.е. буквально взять почти всю информацию, хранящуюся в
удалённом репозитории и создать копию на нашем компьютере

$ git clone <URL repository>
ex. $ git clone https://github.com/Alexadr-for-job-2021/python_for_analist.git

После успешной операции клонирования, создастся каталог demo, в котором будет наш репозиторий (уже привязанный к удалённому).

git remote
Команда git remote позволяет нам управлять удалёнными
репозиториями (добавлять, удалять, просматривать).
Например, мы можем в только что склонированном репозитории
посмотреть remote:
$ git remote -v
origin https://github.com/netology-git/demo.git (fetch)
origin https://github.com/netology-git/demo.git (push)
Общепринято, что первый удалённый репозиторий называют origin.

ОТПРАВКА ИЗМЕНЕНИЙ
После того, как мы поработали локально, необходимо отправить наши
изменения в удалённый репозиторий. Для этого используется команда
git push , для первой отправки: git push –u origin master .
$ git push -u origin master

ОТПРАВКА ИЗМЕНЕНИЙ
При отправке изменений вас попросят ввести логин и пароль. При последующих отправках достаточно использовать команду git push .
Важно: мы с вами ещё не проходили ветки и конфликты, поэтому не вносите параллельные изменения с разных компьютеров. До следующей
лекции делайте одно клонирование с одного репозитория и все изменения отправляйте с одного локального репозитория.

MARKDOWN
Заголовки – так же, как и в HTML поддерживается несколько уровней заголовков: от 1 до 6
# Заголовок первого уровня
## Заголовок второго уровня
### Заголовок третьего уровня
#### Заголовок четвертого уровня
##### Заголовок пятого уровня
###### Заголовок шестого уровня

ТЕКСТ: ОБЫЧНЫЙ И СТИЛИЗОВАННЫЙ
Обычный текст никакой специальной разметкой не оформляется.
Жирный, наклонный и перечёркнутый текст:
**Жирный текст**
*Наклонный текст*
~~Перечеркнутый текст~~
Списки оформляются либо * либо 1. :
* Элемент списка
* Элемент списка
* Вложенный элемент списка
* Вложенный элемент списка
1. Элемент упорядоченного списка
1. Элемент упорядоченного списка
1. Вложенный элемент списка
1. Вложенный элемент списка

Гиперссылки оформляются в формате [Текст ссылки](url-адрес) :
[Текст ссылки](http://localhost)

ИЗОБРАЖЕНИЯ
Изображения оформляются так же, как и гиперссылки, но перед []
ставится ! , т.е. ![логотип](url-изображения) :
![Bootstrap logo](https://i.imgur.com/qhtywl2.png)

КОД
Есть два варианта оформления кода:
— Inline: код заключается в backtickи: `строка кода`
— Block: код с подсветкой синтаксиса:

```javascript
console.log("");
```

МНОЖЕСТВО РЕАЛИЗАЦИЙ: GITHUB
Посмотреть все возможности оформления, которые предлагает сервис GitHub можно по ссылке: https://guides.github.com/features/masteringmarkdown/


ТЕМА2 История работы и ветки

Параллельная разработка
Ветвление (Branches)

master branch
По умолчанию Git самостоятельно создаёт ветку и называется она master .
Вы можете дополнительно создавать любое количество веток и переключаться между ними (в Git очень эффективно реализован механизм переключения между ветками).

ТЕКУЩАЯ ВЕТКА
В Git есть понятие текущая ветка ( current branch ) – т.е. ветка, в которой мы работаем в настоящий момент. Все коммиты, которые мы будем делать будут относиться к ветке, которая в данный момент является текущей.
Мы можем переключаться на другую ветку и делать коммиты в ней, тогда они будут относиться уже к другой ветке.

НАЧНЁМ РАЗРАБАТЫВАТЬ ФУНКЦИЮ
ОПЛАТЫ
Давайте начнём разрабатывать функцию оплаты, делать это мы будем с помощью веток Git.
Схема нашей работы будет следующая:
1. Создадим новую ветку feature/payment ;	$ git branch feature/payment
2. Переключимся на неё;						master$ git checkout feature/payment
3. Сделаем все необходимые изменения;		git add, git commit
4. Зальём всё на GitHub;
5. Сольём наши изменения с веткой master .

ПРОСМОТР ВЕТОК
Посмотреть существующие ветки можно с помощью команды git branch :
master$ git branch 
* master

ПЕРЕКЛЮЧЕНИЕ МЕЖДУ ВЕТКАМИ
Для того, чтобы переключиться на другую ветку необходимо использовать
команду git checkout <имя ветки> :
Важно: чтобы при переключении не было проблем, возьмите за привычку фиксировать все файлы до переключения.


СЛИЯНИЕ ИЗМЕНЕНИЙ
После того, как мы завершили все изменения (целиком доработали нашу новую функцию), нам необходимо эти изменения интегрировать (или как говорят «слить» с веткой master ).

Общий сценарий выглядит следующим образом:
1. Переключаемся на ветку master ;
2. Выполняем операцию merge ;
3. Заливаем всё на GitHub.
