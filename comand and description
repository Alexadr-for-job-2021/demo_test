Alexadr-for-job-2021

https://www.conventionalcommits.org/ru/v1.0.0-beta.4/  commits for github

Чтобы задать имя пользователя и email необходимо выполнить следующие команды:
git config --global user.name "Vasya Pupkin"
git config --global user.email vasya@localhost

РАБОТА В ЛОКАЛЬНОМ РЕПОЗИТОРИИ

ЗАДАЧА
Решим следующую задачу: у нас есть проект веб-сайта, состоящий из
нескольких файлов и каталогов. Задача состоит в том, чтобы перевести
работу с этим сайтом в Git.
ОБЩАЯ СХЕМА РАБОТЫ
1. Создание локального репозитория для проекта;
2. Добавление файлов (изменённых) в список отслеживания (stage area или index);
3. Фиксация изменений в файлах (commit).
Операции 2 и 3 выполняются в течение всего развития проекта.

Репозиторий создаётся в конкретном каталоге с помощью команды:
$ git init  #В результате появится подкаталог .git в котором и будут храниться служебные настройки git'а и сам репозиторий.

ДОБАВЛЕНИЕ ФАЙЛОВ
Git будет следить только за теми файлами, которые вы добавили в «список отслеживаемых».
Cделать это можно с помощью команды:
$ git add index.html # где index.html – это имя добавляемого файла.

Есть ряд специальных символов, которые позволяют упростить процесс работы с файлами:
Специальный символ * означает любую последовательность символов.
— git add * добавит в список отслеживаемых файлов все файлы в текущем каталоге и подкаталогах;
— git add *.js добавит в список отслеживаемых файлов все файлы с расширением .js в текущем каталоге и подкаталогах.

Команда git status позволяет отследить текущий статус нашего репозитория:
$ git status
Для фиксации изменений используется команда git commit
$ git commit
После коммита мы получаем «чистое» состояние, готовое к новому добавлению изменений и фиксации ( git status )
$ git status
Флаг -a ( --all ) говорит о том, что мы добавляем в stage все удалённые/изменённые файлы (но не новые, новые нужно добавлять отдельно).
Флаг -m "Сообщение коммита" ( --message="Сообщение коммита" ) позволяет не открывать редактор, а указывать сообщение прямо в командной строке.

ИСТОРИЯ
Посмотреть историю коммитов можно с помощью команды git log .
$ git log
Перед коммитом файла Git вычисляет контрольую сумму, которая является идентификатором коммита. 
Ex: commit 3e36e82215a88a219a0a22fb7ce177bf05ad4208

Посмотреть полную информацию о коммите мы можем с помощью команды git show <id-коммитта> . 
ID не обязательно писать целиком, достаточно первых нескольких символов
$ git show 3e36e

Если вы случайно добавили в stage area файл, который добавлять не нужно, то удалить его можно командой:
$ git rm --cached stuff.txt #где stuff.txt – имя файла.
Если вы случайно зафиксировали коммит с ошибочным комментарием, то исправить комментарий последнего коммита можно с помощью команды:
$ git commit --amend -m "Roboto Font" # где "Roboto Font" – новое сообщение коммита.
Если вы залили коммит с ошибкой, то можно создать «зеркальный» коммит, который отменит действие предыдущего:
$ git revert <commit-id> # где <commit-id> – идентификатор коммита.
# Идентификатор коммита можно посмотреть с помощью команды git log .
Вся справка по командам предоставляется самим Git:
git – краткая справка по git;
git help <command> – справка по конкретной команде git.

КЛОНИРОВАНИЕ РЕПОЗИТОРИЯ
Операция git clone позволяет нам склонировать удалённый
репозиторий, т.е. буквально взять почти всю информацию, хранящуюся в
удалённом репозитории и создать копию на нашем компьютере

$ git clone <URL repository>
ex. $ git clone https://github.com/Alexadr-for-job-2021/python_for_analist.git
